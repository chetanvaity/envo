k get pods -n ops
kubectl exec -it argocd-server-595b8d964d-qkkww bash
k get pods -n ops
k exec -it extenral-dns-external-dns-6c7b5f8c-tfqdx bash
k get pods --all-namespaces
k exec -it nginx-ingress-controller-5f46989d4b-ff2zq bash
k
k get nodes
ls ~/.*
ls ~/.c*
ip-10-15-126-238.us-west-2.compute.internal   Ready    master   2d19h   v1.13.11
ssh -i ~/.core.pem admin@ip-10-15-126-238.us-west-2.compute.internal
gp
g checkout chetan/addLabels
alias g git
g checkout chetan/addLabels
git checkout chetan/addLabels
alias
gs
alias gs 'git status'
gs
gp
cd argocd/prometheus-operator/helm/
ls
cd grafana-dashboards/
ls
vimdiff a2.json aws-rds-cloudwatch.json
ls
cd ..
ls
cd core/
ls
terraform plan
cd ../../
cd ..
cd argocd/
ls
cd efs-provisioner/
ls
cd t1
ls
cd ..
mv t1 ~/localchanges/
mv t2 ~/localchanges/
gd
gs
cd ..
cd ..
cd argocd/
ls
argocd 
argocd context
argocd login
argocd login argocd.core.orbitalinsight.io --grpc-web
argocd cluster
argocd cluster list
argocd cluster add --help
argocd context
argocd cluster
argocd cluster list
argocd context list
argocd context 
argocd context --help
argocd cluster add
argocd cluster add k8.test2.orbitalinsight.io
--server-crt string   Server certificate file
k config set-context --current --namespace=ops 
ls
helm ls
helm ls
ls
cd oi-cluster-init/
ls
gp
ls
less argo-app-core.yaml
cat argo-app-core.yaml
ls
cd yaml/
ls
cat *
ls
cd ..
ls
cp argo-app-dev.yaml argo-app-test.yaml 
ff *test
ff argo-app-test.yaml
ls
annotations:
ls
ff argo-app-test.yaml
k apply -f argo-app-test.yaml 
metadata:
k apply -f argo-app-test.yaml 
ff argo-app-test.yaml 
k apply -f argo-app-test.yaml 
ff argo-app-core.yaml
k get application
k edit application
ls
sj bastion.prod
sj bastion.prod.orbitalinsight.info
sj bastion101.prod2.orbitalinsight.info
alias g git $*alias local $*alias ff find-file $1alias emacs find-file $1alias ll ls -l $*alias k kubectl $*alias gs git status
g
(defun get-theme (theme-name)  "Some color themes to work with my favourite emacs color themes"  (cond ((string-equal theme-name "dark-laptop") '((bg . "black") (wheel . "blue")                                                   (punctuation . "white") (cluster . "red")                                                   (namespace . "turquoise") (path . "blue")                                                   (git . "green")))        ((string-equal theme-name "robin-hood") '((bg . "#304020") (wheel . "DodgerBlue1")                                                  (punctuation . "NavajoWhite") (cluster . "coral")                                                  (namespace . "turquoise") (path . "DodgerBlue1")                                                  (git . "SpringGreen1")))        ))(defun with-face (str &rest face-plist)  (propertize str 'face face-plist))(defun git-prompt ()  "Return string to be displayed about git status"  (car (last (split-string (shell-command-to-string "git  status | head -1")))))(defun path-prompt ()  "Return string to be displayed about the path"  (let ((dirs (split-string (eshell/pwd) "\/" t)))       (if (> (length dirs) 3)           (concat ".../" (mapconcat 'identity (nthcdr (- (length dirs) 2) dirs) "/"))         (eshell/pwd))))(defun k8s-prompt ()  "Return a fancy string with context/cluster name and namespace"  (concat   (with-face "(" :background prompt-bg :foreground (cdr (assoc 'punctuation theme)))   (with-face "\u2388" :background prompt-bg :foreground (cdr (assoc 'wheel theme)))   (with-face "|" :background prompt-bg :foreground (cdr (assoc 'punctuation theme)))   (with-face (replace-regexp-in-string "\n$" "" (shell-command-to-string                                                  "kubectl config current-context | cut -d. -f1-2 2>/dev/null"))              :background prompt-bg :foreground (cdr (assoc 'cluster theme)))   (with-face ":" :background prompt-bg :foreground (cdr (assoc 'punctuation theme)))   (with-face (replace-regexp-in-string "\n$" "" (shell-command-to-string                                                  "kubectl config view --minify --output 'jsonpath={..namespace}' 2>/dev/null"))              :background prompt-bg :foreground (cdr (assoc 'namespace theme)))   (with-face ")" :background prompt-bg (cdr (assoc 'punctuation theme)))))(defun k8s-git-eshell-prompt ()  (let ((prompt-bg "#304020") (theme (get-theme "robin-hood")))    (concat     (k8s-prompt)     (with-face (concat (path-prompt) " ") :background prompt-bg :foreground (cdr (assoc 'path theme)))     (with-face      (or (ignore-errors (format "(%s)" (git-prompt))) "")      :background prompt-bg :foreground (cdr (assoc 'git theme)))     (if (= (user-uid) 0)         (with-face " #" :foreground "red")       " $")     " ")))(setq eshell-prompt-function 'k8s-git-eshell-prompt)(setq eshell-highlight-prompt nil)
ls
 helm ls | grep services
           (concat ".../" (mapconcat 'identity (nthcdr (- (length dirs) 2) dirs) "/"))
dig visualization.orbitalinsight.com +short
cutl https://visualization.orbitalinsight.com/api/v1/ping 
curl https://visualization.orbitalinsight.com/api/v1/ping 
curl https://visualization2.orbitalinsight.com/api/v1/ping 
cd ..
cd ..
cd ..
cd ns/ops/helm/cluster-autoscaler/
ls
helm package .
ls
ls -al
helm package .
ls
helm repo ls
helm repo list
curl --data-binary '@kubernetes-dashboard-1.tgz' 'https://chartmuseum.dev.orbitalinsight.io/api/charts'
curl --data-binary '@bpr' 'https://chartmuseum.dev.orbitalinsight.io/api/charts'
ls
